[{"title":"Docker + Nginx部署前端项目","url":"/2024/05/10/Docker-Nginx%E9%83%A8%E7%BD%B2%E5%89%8D%E7%AB%AF%E9%A1%B9%E7%9B%AE/","content":"Docker + Nginx部署前端项目\n\n","tags":["Docker"]},{"title":"GitHub Actions & Docker实现自动化部署","url":"/2024/05/10/GitHub-Actions-Docker%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2/","content":"\n教程：GitHub Actions工作流自动化的入门核心_哔哩哔哩_bilibili\n\nGitHub Actions + Docker实现自动化部署SpringBoot多环境切换\n参考: 31 SpringBoot多环境的切换(生产环境、开发环境、测试环境)_spring boot生产和开发环境-CSDN博客\n\n\n在resources/下创建application-dev.yaml和application-prouct.yaml文件，分别表示开发环境和生产环境。\n\n在两份配置文件中分别自定义配置，例如：\n \n\n在application.yaml文件中引用：\n \n\n激活配置文件：\n\n配置文件：在配置文件中指定spring.profiles.active=dev\n虚拟机参数：在VM options指定 -Dspring.profiles.active=dev\n命令行参数：java -jar xxx.jar –spring.profiles.active=dev\n\n\n\nIDEA中使用第二种即可，部署时使用命令行参数指定。\nDockerfile文件编写在项目根目录下，新建Dockerfile，内容如下：\nFROM fabric8/java-alpine-openjdk11-jreENV TZ=Asia/ShanghaiRUN rm -f /etc/localtime \\&amp;&amp; ln -sv /usr/share/zoneinfo/Asia/Shanghai /etc/localtime \\&amp;&amp; echo \"Asia/Shanghai\" &gt; /etc/timezoneCOPY target/*.jar /app.jarENTRYPOINT [\"java\",\"-jar\",\"/app.jar\", \"--spring.profiles.active=product\"]\n\n注意：最后一行指定了配置文件。\nworkflow文件编写以下两种方式二选一即可。\n使用GitHub提供的Ubuntu环境在项目根目录下，新建./github/workflows/delpoy.yml文件，内容如下：\n# 使用Github Actions自动部署Spring Boot项目到服务器name: Deploy With Dockeron:  push:    branches: [ master ]jobs:  build:    name: Build工作    runs-on: ubuntu-latest # 使用GitHub提供的Ubuntu环境    steps:      - name: 读取仓库内容        uses: actions/checkout@v4      - name: 设置Java环境        uses: actions/setup-java@v4        with:          java-version: 11          distribution: 'adopt'          cache: 'maven'      #      - name: 缓存Maven依赖      #        uses: actions/cache@v3      #        with:      #          path: ~/.m2/repository      #          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}      #          restore-keys: |      #            ${{ runner.os }}-maven-      - name: 编译打包        run: mvn package -Dmaven.test.skip=true      - name: 登录到DockerHub        uses: docker/login-action@v3        with:          username: ${{ secrets.DOCKER_USERNAME }}          password: ${{ secrets.DOCKER_PASSWORD }}      - name: 构建Docker镜像        uses: docker/build-push-action@v5        with:          context: .          file: ./Dockerfile          push: true          tags: ${{ secrets.DOCKER_USERNAME }}/project-name:latest      - name: 部署到服务器        uses: appleboy/ssh-action@master        with:          host: ${{ secrets.SERVER_HOST }}          username: ${{ secrets.SERVER_USERNAME }}          port: ${{ secrets.SERVER_PORT }}          password: ${{ secrets.SERVER_PASSWORD }}          script: |            sh /path/to/delpoy.sh\n\nproject-name记得替换为自己的项目名称\n其中deploy.sh脚本内容如下（记得替换{{}}中内容，端口记得按需修改）：\ndocker pull {{username}}/{{project-name}}:latestdocker tag docker.io/{{username}}/{[project-name]}:latest {{project-name}}:latestdocker rm -f {{project-name}}docker run --name {{project-name}} -p 1002:8081 -d {{project-name}}:latestdocker image prune -af\n\nDockerHub记得先注册账号。如果Dockerhub上传的是私密镜像，记得在服务器登录账号：docker login\n在GitHub项目设置中添加yml文件中的secrets，位置如下：\n\n使用自己的服务器\n添加Runner\n \n\n选择服务器对应系统，按照所示步骤在服务器上执行即可：\n \n 其中，运行config.sh脚本记得使用非root用户，否则会报错。\n 其次./run.sh命令改为nohup ./run.sh &amp;在后台不挂断运行。\n\n在服务器记得安装maven和Java\n sudo apt updatesudo apt install mavenmvn --version # 验证是否安装成功\n\n\n参考：如何在 Ubuntu 20.04 上安装 Apache Maven-腾讯云开发者社区-腾讯云\n\n\n在项目创建workflow文件，内容如下：\n name: Deploy With Runneron:  push:    branches: [ master ]jobs:  build:    name: Build工作    runs-on: self-hosted # 使用自己的服务器    steps:      - name: 读取仓库内容        uses: actions/checkout@v4      - name: 设置Java环境        run: |          pwd          java --version          mvn --version      - name: 编译打包        run: mvn package -Dmaven.test.skip=true      - name: 构建Docker镜像        run: |          docker build -f Dockerfile -t {{project-name}}:latest .      - name: 部署到服务器        run: |          docker rm -f {{project-name}          docker run -d --name {{project-name}} -p 1002:8080 {{project-name}}:latest          docker ps\n\n 端口记得按需修改\n\n\n\n\n开始自动化部署将代码提交到GitHub后，在GitHub的Actions就会发现正在自动化部署。\n参考\n使用Github Actions + Docker 部署Spring Boot应用 - 掘金\nGithub Actions实现Spring Boot自动化部署（第二弹）_JavaGPT的技术博客_51CTO博客\n\n","tags":["Docker","GitHub"]},{"title":"Spring：IoC&DI 控制反转和依赖注入","url":"/2024/01/30/Spring%EF%BC%9AIoC-DI-%E6%8E%A7%E5%88%B6%E5%8F%8D%E8%BD%AC%E5%92%8C%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5/","content":"高内聚，低耦合软件开发需要遵循高内聚、低耦合的原则。\n\n高内聚指的是：一个模块中内部的各个元素之间的联系紧密程度高。\n低耦合指的是：软件中各个模块间的依赖关系越低越好。\n\n经典的MVC三层架构将程序分为了三层：\n\n数据访问层 DAO层：负责与数据库进行交互\n业务逻辑层 Service层：负责处理业务逻辑\n请求处理层 Controller层：负责接收请求、响应数据。\n\n在这种架构下，一个类只负责一个功能，在一定程度上提高了内聚、降低了耦合。\n但是传统开发过程中，我们需要在类的内部主动创建依赖对象，例如在三层架构中，Service层中需要创建Dao层的对象，Controller层需要创建Service层对象。\n这样导致了类与类之间的耦合，难以测试，IoC （Inversion of Control, 控制反转)这种设计思想就是为了降低这种耦合性。\nInversion of ControlIoC是一种设计思想，将创建和查找依赖对象的控制权交给容器，由容器进行管理。\n","tags":["java","Spring"]},{"title":"GitHub Pages & Hexo 搭建博客","url":"/2023/08/28/GitHub-Pages-Hexo-%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/","content":"GitHub Pages &amp; Hexo 搭建博客Hexo 安装与配置\nHexo 安装与配置 | Easy Hexo 👨‍💻\n\n\n确认本地已经安装 Git 和 Node.js\n安装hexo: npm install -g hexo-cli\n在本地创建一个文件夹，然后往这个文件夹中安装Hexo\n配置 Hexo，其配置文件为_config.yml：配置 Hexo | Easy Hexo 👨‍💻\n\nnpm install -g hexo-cli # 安装Hexomkdir mkdir &lt;your_blog_name&gt;  # 建立你的网站根目录，名字可以自己修改hexo init &lt;your_blog_name&gt; # 往这个文件夹中安装Hexo\n\nHexo的keep主题安装与配置\nKeep 主题使用指南 | Hexo 主题 Keep 官方文档 &amp;&amp; XPoet’s Blog\n\nStep 1: 安装Keep主题\ncd &lt;your_blog_name&gt;npm install hexo-theme-keep\n\nStep 2: 使用Keep主题：在 Hexo 配置文件_config.yml 中将 theme 设置为 keep。\ntheme: keep\n\nStep 3：配置Keep主题：在文件夹下创建一个_config.keep.yml文件，参照文档进行配置：base_info | Keep 主题使用指南\n其他：\n\n可能用到的命令：\n  npm install hexo-theme-keep # 安装 keep 主题npm install hexo-filter-mathjax # 安装显示数学公式的插件npm install hexo-generator-searchdb # 安装站内搜索插件hexo new page about # hexo创建页面命令，使用该命令创建about页面。\n\n数学公式 | Keep 主题使用指南：建议开启。\n\n配置时的图标文件可以放在source/images文件夹中。\n\n\n使用GitHub Pages部署到GitHub\n部署 Hexo | Easy Hexo 👨‍💻\n\nStep 1: 创建一个仓库：.github.io\nStep 2: 在（.github.io）安装部署插件\nnpm install hexo-deployer-git --savenpm install hexo-server --save\n\nStep 3: 部署到 GitHub\nhexo clean &amp;&amp; hexo d -g\n\nGitHub保存博客项目的源代码# 本地博客项目根目录下运行git initgit checkout -b hexo # 切换分支git add .git commit -m \"init\"git remote add origin git@github.com:isJinHu/isjinhu.github.io.git # 添加远程仓库git remote -vgit push origin hexo:hexo # push到远程仓库的hexo分支\n\n其他\nhexo new &lt;artical_name&gt;创建一篇新文章\n\nGitalk设置：comment | Keep 主题使用指南\n\n/scaffolds/post.md: 修改post模板，可以设置默认打开数学公式渲染等\n\n\n  title: {{ title }}date: {{ date }}mathjax: truetags:\n\nHexo deploy失败？\n执行Hexo d报错Spawn failed， 以及OpenSSL SSL_read: Connection was reset, errno 10054_copying files from extend dirs…warning: in the w_Candle_light的博客-CSDN博客\n\nhexo config deploy.repository git@github.com:isjinhu/isjinhu.github.io.git\n\n","tags":["GitHub","Hexo"]},{"title":"Hello World","url":"/2023/08/26/hello-world/","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.\nQuick StartCreate a new post$ hexo new &quot;My New Post&quot;\n\nMore info: Writing\nRun server$ hexo server\n\nMore info: Server\nGenerate static files$ hexo generate\n\nMore info: Generating\nDeploy to remote sites$ hexo deploy\n\nMore info: Deployment\n","tags":["Hexo"]}]